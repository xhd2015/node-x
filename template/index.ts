export const files:{[name:string]:string} = {}

files["cmd.ts"] = "//#!node-ext: install moment\n\nimport { run as runCmd, parseOptions } from \"@node-ext/cmd\"\nimport { resolveShellPath } from \"@node-ext/env\"\nimport path = require(\"path\")\nimport moment from 'moment'\nimport { mkdir, readFile } from \"fs/promises\"\n\nconst help = `\nUsage: __CMD__ flush working\n       __CMD__ download working\n\nOptions:\n  -h, --help               help\n\nExamples:\n  $ \n`\n\nexport interface Options {\n}\n\nasync function run() {\n    // argv: [node, sync.js, ...]\n    const { args: [cmd, ...args], options } = parseOptions<Options>(help, \"h,help\", { stopAtFirstArg: true })\n    if (!cmd) {\n        throw new Error(\"requires cmd\")\n    }\n    if (cmd === 'flush') {\n        // do flush\n    } else {\n        throw new Error(`unknown cmd: ${cmd}`)\n    }\n}\n\nrun().catch(e => {\n    console.error(e.message)\n    process.exit(1)\n})"

files["cmd-with-config.ts"] = "//#!node-ext: install moment\n\nimport { run as runCmd, parseOptions } from \"@node-ext/cmd\"\nimport { resolveShellPath } from \"@node-ext/env\"\nimport path = require(\"path\")\nimport dateFormat from 'dateformat'\nimport { mkdir, readFile } from \"fs/promises\"\n\nconst help = `\nUsage: __CMD__ flush working\n       __CMD__ download working\n\nOptions:\n  -h, --help               help\n  -x, --debug              debug\n  -f, --force              force lock\n`\n\nexport interface Config {\n    use?: string\n}\n\nasync function init() {\n    const cfgJSON = await readFile(resolveShellPath(\"~/.nx-sync.json\"), { 'encoding': 'utf-8' }).catch(() => { })\n\n    let cfg: Config\n    try {\n        cfg = cfgJSON ? JSON.parse(cfgJSON as string) : null\n    } catch (e) {\n\n    }\n\n    // create ~/.nx-sync/\n    await mkdir(resolveShellPath(\"~/.nx-sync\"), { recursive: true })\n}\n\nexport interface Options {\n    help?: boolean\n    debug?: boolean\n}\n\nasync function run() {\n    await init()\n\n    // argv: [node, sync.js, ...]\n    const { args: [cmd, ...args], options } = parseOptions<Options>(help, \"h,help x,debug f,force\", { stopAtFirstArg: true })\n    const { debug, force, pause } = options\n    if (!cmd) {\n        throw new Error(\"requires cmd\")\n    }\n    if (cmd === 'flush') {\n        // do flush\n    } else {\n        throw new Error(`unknown cmd: ${cmd}`)\n    }\n}\n\nrun().catch(e => {\n    console.error(e.message)\n    process.exit(1)\n})"