!function(e,n){if("object"==typeof exports&&"object"==typeof module)module.exports=n();else if("function"==typeof define&&define.amd)define([],n);else{var t=n();for(var o in t)("object"==typeof exports?exports:e)[o]=t[o]}}(globalThis,(()=>(()=>{"use strict";var e={900:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.runCmd=n.parseOptions=n.runOutput=n.catchedRun=n.run=void 0;const o=t(81),r=t(265);async function i(e,n){const t=o.spawn("bash",[`-e${n?.debug?"x":""}c`,e,"--",...n?.args||[]],{cwd:n?.cwd,env:{...process.env,...n?.env}});t.stderr.on("data",(e=>process.stderr.write(e)));let r="";return n?.needStdout?t.stdout.on("data",(e=>r+=e)):t.stdout.on("data",(e=>process.stdout.write(e))),new Promise(((o,i)=>{t.on("error",(function(e){i(e)})),t.on("close",(function(t){if(0!==t){let o=n?.description;const r=100;if(!o)if(e.length<=r)o=e;else{const n=e.split("\n").map((e=>e.trim())).join("\n");o=n.length<=r?n:n.slice(0,r)+"..."}i(new Error(`exit code ${t}: ${o}`))}else o({exitCode:t,stdout:r})}))}))}Object.defineProperty(n,"parseOptions",{enumerable:!0,get:function(){return r.parse}}),n.run=i,n.runCmd=i,n.catchedRun=async function(e){e().catch((e=>{console.error(e?.message||e),process.exit(1)}))},n.runOutput=async function(e,n){return i(e,{...n,needStdout:!0}).then((e=>e.stdout.endsWith("\n")?e.stdout.slice(0,e.stdout.length-1):e.stdout))}},767:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.resolveShellPath=void 0;const o=t(17);n.resolveShellPath=function(e){return"~"===e?process.env.HOME:e.startsWith("~/")?(0,o.join)(process.env.HOME,e.slice("~/".length)):e}},597:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.linkToPath=n.getNpmGlobalRoot=n.addToCommonProfiles=n.commonProfiles=n.addToPath=void 0;const o=t(292),r=t(900),i=t(767),s=t(65);async function l(e,n){const t=await(0,o.readFile)(e,{encoding:"utf-8"}).catch((e=>{}));return!!t&&!t.includes(n)&&(await(0,o.writeFile)(e,(0,s.addSuffix)(t,"\n")+n+"\n"),!0)}async function c(e){const t=[];return await Promise.all(n.commonProfiles.map((async n=>{await l((0,i.resolveShellPath)(n),e)&&t.push(n)}))),t}n.addToPath=l,n.commonProfiles=["~/.bashrc","~/.bash_profile","~/.zshrc","~/.profile"],n.addToCommonProfiles=c,n.getNpmGlobalRoot=async function(){return await(0,r.runOutput)("npm -g root || true")},n.linkToPath=async function(e,n,t){if(!e)throw new Error("requires name");if(!n)throw new Error("requires file");const o=(process.env.PATH||"").split(":");if(o.includes("/usr/local/bin")){let o=!0;if(await(0,r.runCmd)(`\n        if [[ ! -d /usr/local/bin ]];then exit 1;fi\n        \n        # nx exists, and is not a link file, then do not replace\n        if [[ -e "/usr/local/bin/${e}" && ! -L "/usr/local/bin/${e}" ]];then exit 1;fi\n\n        ln -sf "${n}" "/usr/local/bin/${e}"\n        `,t).catch((()=>o=!1)),o)return}if(await(0,r.runCmd)(`\n    mkdir -p ~/.nx/bin\n    ln -sf "${n}" ~/.nx/bin/"${e}"\n    `,t),o.includes("~/.nx/bin")||o.includes((0,i.resolveShellPath)("~/.nx/bin")))return;const s=await c("export PATH=~/.nx/bin:$PATH # nx");0!==s.length&&console.log(`updated profiles: ${s.join(",")}, please source profiles if needed`)}},265:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.parse=void 0,n.parse=function(e,n,t){null==t&&(t=process.argv.slice(2));const o=n.split(/\s+/),r={},i={},s={};for(let e of o){let n,t=e.lastIndexOf("=");-1!=t&&(n=e.slice(t+1),e=e.slice(0,t));let o="zero";e.endsWith("::")?(o="many",e=e.slice(0,e.length-2)):e.endsWith(":")&&(o="one",e=e.slice(0,e.length-1));const l=e.split(",");if(0==l.length)continue;const c=l[l.length-1];if(null!=i[c])throw new Error(`duplicate option name:${c}`);i[c]=o,n&&(s[c]=n);for(const e of l)if(0!=e.length){if(null!=r[e])throw new Error(`duplicate option name:${e}`);r[e]=c}}const l=[],c={},u={};let a=0;function f(e,n){let o=n===u;o&&(n=null);const l=r[e];if(!l)throw new Error(`no such option:${e}`);const f=s[l];if(f&&(c[f]=e),"zero"===i[l]){if(o)return void(c[l]=!0);if(null!=n)if("on"==n||"On"==n||"ON"==n||"true"==n||"True"==n||"TRUE"==n)c[l]=!0;else{if("off"!=n&&"Off"!=n&&"OFF"!=n&&"false"!=n&&"False"!=n&&"FALSE"!=n)throw new Error(`option requires no argument:${e},except on/On/ON/true/True/TRUE or off/Off/OFF/false/False/FALSE`);c[l]=!1}else c[l]=!0}else if("one"===i[l]){if(o&&(n=t[++a]),null==n)throw new Error(`option requires one argument:${e}`);c[l]=n}else{if("many"!==i[l])throw new Error(`unknown option repeat:${e} ${i[l]}`);if(o&&(n=t[++a]),null==n)throw new Error(`option requires argument:${e}`);null==c[l]?c[l]=[n]:c[l].push(n)}}for(;a<t.length;a++){const e=t[a];if("--"==e){l.push(...t.slice(a+1));break}if("-"!=e)if(e.startsWith("--")){let n=e.slice(2);const t=n.lastIndexOf("=");let o;-1!=t?(o=n.slice(t+1),n=n.slice(0,t)):o=u,f(n,o)}else if(e.startsWith("-")){const n=e.slice(1);if(1==n.length){f(n,u);continue}const t=n[0],o=r[t],s=i[o];if("one"==s||"many"==s)f(t,n.slice(1));else if("zero"==s){for(const e of n.slice(0,n.length-1))f(e,null);f(n[n.length-1],u)}}else l.push(e);else l.push(e)}function d(){let n=e;return n.startsWith("\n")&&(n=n.slice(1)),n.endsWith("\n")&&(n=n.slice(0,n.length-1)),n}return!0===c.help&&(console.log(d()),process.exit(0)),{args:l,options:c,getHelp:d}}},65:(e,n)=>{function t(e,n,t){const o=[],r=e.length;for(let i=0;i<r;){let s=n(e,i);s<0&&(s=r),o.push(t(i,s,e)),i=s+1}return o}Object.defineProperty(n,"__esModule",{value:!0}),n.addSuffix=n.trimSuffix=n.trimPrefix=n.iterMatch=n.iterLines=void 0,n.iterLines=function(e,n){return t(e,((e,n)=>e.indexOf("\n",n)),n)},n.iterMatch=t,n.trimPrefix=function(e,n){return e?.startsWith?.(n)?[e.slice(n.length),!0]:[e,!1]},n.trimSuffix=function(e,n){return e?.endsWith?.(n)?[e.slice(0,e.length-n.length),!0]:[e,!1]},n.addSuffix=function(e,n){return e.endsWith(n)?e:e+n}},81:e=>{e.exports=require("child_process")},292:e=>{e.exports=require("fs/promises")},17:e=>{e.exports=require("path")}},n={};function t(o){var r=n[o];if(void 0!==r)return r.exports;var i=n[o]={exports:{}};return e[o](i,i.exports,t),i.exports}var o={};return(()=>{var e=o;Object.defineProperty(e,"__esModule",{value:!0});const n=t(17),r=t(900),i=t(597);(0,r.catchedRun)((async function(){const e=await(0,i.getNpmGlobalRoot)();await(0,i.linkToPath)("nx",(0,n.join)(e,"node-ext/bin/nx"),{debug:!0})}))})(),o})()));