!function(e,n){if("object"==typeof exports&&"object"==typeof module)module.exports=n();else if("function"==typeof define&&define.amd)define([],n);else{var t=n();for(var o in t)("object"==typeof exports?exports:e)[o]=t[o]}}(globalThis,(()=>(()=>{"use strict";var e={247:function(e,n,t){var o=this&&this.__awaiter||function(e,n,t,o){return new(t||(t=Promise))((function(r,s){function i(e){try{l(o.next(e))}catch(e){s(e)}}function a(e){try{l(o.throw(e))}catch(e){s(e)}}function l(e){var n;e.done?r(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(i,a)}l((o=o.apply(e,n||[])).next())}))};Object.defineProperty(n,"__esModule",{value:!0}),n.run=void 0;const r=t(81);n.run=function(e,n){return o(this,void 0,void 0,(function*(){const t=r.spawn("bash",[`-e${(null==n?void 0:n.debug)?"x":""}c`,e,"--",...(null==n?void 0:n.args)||[]],{cwd:null==n?void 0:n.cwd,env:Object.assign(Object.assign({},process.env),null==n?void 0:n.env)});return t.stdout.on("data",(e=>process.stdout.write(e))),t.stderr.on("data",(e=>process.stderr.write(e))),new Promise(((e,n)=>{t.on("error",(function(e){n(e)})),t.on("close",(function(t){0!==t?n(new Error(`exit code: ${t}`)):e(t)}))}))}))}},258:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.formatWebpackConfigJS=n.formatTsConfigJSON=n.formatPackageJSON=void 0,n.formatPackageJSON=function(e){return`{\n        "name": "${e||"tmp"}",\n        "version": "0.0.1",\n        "dependencies": {\n        },\n        "scripts": {\n            "build": "webpack --config webpack.config.js --progress --mode=production",\n            "build-dev": "webpack --config webpack.config.js --progress --mode=development",\n            "start":"npm install && npm run build && node bin/run.js \\"$@\\""\n        },\n        "devDependencies": {\n            "@babel/cli": "^7.1.0",\n            "@babel/core": "^7.1.0",\n            "@babel/preset-env": "^7.1.0",\n            "@types/node": "^18.11.18",\n            "babel-loader": "^8.1.0",\n            "file-loader": "^6.0.0",\n            "ts-loader": "^9.3.1",\n            "webpack-cli": "^4.10.0"\n        }\n    }\n    `},n.formatTsConfigJSON=function(){return'{\n        // Change this to match your project\n        // "include": [],\n        "compilerOptions": {\n            // Tells TypeScript to read JS files, as\n            // normally they are ignored as source files\n            // "allowJs": true,\n            // Generate d.ts files\n            // "declaration": true,\n            // This compiler run should\n            // only output d.ts files\n            // "emitDeclarationOnly": true,\n            // Types should go into this directory.\n            // Removing this would place the .d.ts files\n            // next to the .js files\n            //   "outDir": "dist"\n            "target": "es6",\n            "lib": [\n                "ES2021",\n                "ES2021.String"\n            ],\n            // "target": "es6",\n            "module": "commonjs",\n            // "module": "ES2015",\n            // "outDir": "src/debug",\n            "moduleResolution": "node",\n            "rootDirs": ["./"],\n            "paths": {\n              "@/*":["./*"],\n              "@node-ext/*": ["./*"]\n            }\n        },\n        "exclude": []\n    }'},n.formatWebpackConfigJS=function(){return'const path = require("path");\n    \n    module.exports = {\n      entry: {\n        run: {\n          import: "./run.ts",\n          filename: "run.js",\n        },\n      },\n      output: {\n        path: path.resolve(__dirname, "bin"),\n        libraryTarget: "umd", // for nodejs need this\n        globalObject: "globalThis", // goja only recognize globalThis, not the default global.\n      },\n      module: {\n        rules: [\n          {\n            test: /.ts$/,\n            // exclude: /(node_modules)/,\n            use: {\n              loader: "ts-loader",\n              options: {\n                transpileOnly: true,\n              },\n            },\n          },\n          {\n            test: /.(js)$/,\n            exclude: /(node_modules)/,\n            resolve: {\n              extensions: [".ts", ".js"],\n            },\n            use: {\n              loader: "babel-loader",\n              options: {\n                presets: ["@babel/preset-env"],\n              },\n            },\n          },\n        ],\n      },\n      resolve: {\n        alias: {\n          "@": path.resolve(__dirname, "./"),\n          "@node-ext": path.resolve(__dirname, "./")\n        },\n        extensions: [".ts", ".js"],\n      },\n      target: "node",\n      node:{\n        __filename:true,\n        __dirname:true,  // these two options make the __filename & __dirname correspond to original file name\n      },\n      plugins: [],\n      // devtool: "source-map",\n    };\n    '}},192:function(e,n,t){var o=this&&this.__awaiter||function(e,n,t,o){return new(t||(t=Promise))((function(r,s){function i(e){try{l(o.next(e))}catch(e){s(e)}}function a(e){try{l(o.throw(e))}catch(e){s(e)}}function l(e){var n;e.done?r(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(i,a)}l((o=o.apply(e,n||[])).next())}))};Object.defineProperty(n,"__esModule",{value:!0}),n.run=void 0;const r=t(17),s=t(292),i=t(37),a=t(258),l=t(247),d=t(113);function c(){return o(this,void 0,void 0,(function*(){const{script:e,args:n,debug:t,code:o,help:c,printDir:u,force:p,clean:f,rm:h,root:m}=function(e){const n={args:[]},t=e.length;for(let o=0;o<t;o++){const t=e[o];if("--"===t){n.args.push(...e.slice(o+1));break}if("-h"===t||"--help"===t)n.help=!0;else if("-x"===t||"--debug"===t)n.debug=!0;else if("-c"===t||"--code"===t)n.code=!0;else if("-p"===t||"--print-dir"===t)n.printDir=!0;else if("-f"===t||"--force"===t)n.force=!0;else if("--clean"===t)n.clean=!0;else if("--rm"===t)n.rm=!0;else if("--root"===t)n.root=!0;else{if(t.startsWith("-"))throw new Error(`unrecognized option: ${t}`);n.args.push(t)}}return[n.script,...n.args]=n.args,n}(process.argv.slice(2));if(c)return void console.log('Usage: nx [OPTIONS] <script> [--] [script-args...]\n\nOptions:\n  -h, --help        show help message\n  -p, --print-dir   print the generated directory\n      --root        print root directory and exit\n  -x, --debug       log debug info\n  -c, --code        open the directory with vscode\n  -f, --force       force install modules\n      --clean       clean the target dir before writing files\n      --rm          remove the target dir, and do nothing\n\nYou can set `nx` as an alias to `node "$(npm -g root)/node-ext/bin/node-ext.js"` to simplify the usage.\nNOTE: you must not use with npx: `npx -g node-ext`, npx simply does make `npm install` fails without fair reason.\nSetup:\n  $ npm install -g node-ext # install or upgrade to newest version\n  $ echo "alias nx=\'node \\"\\$(npm -g root)/node-ext/bin/node-ext.js\\"\'" >> ~/.bash_profile\n\nExample:\n  $ nx --help       # show help\n  $ nx test.ts      # run test.ts\n  $ nx -c test.ts   # open the directory\n  $ nx update       # update node-ext version\n\nCompare with `ts-node`: you can also use `ts-node` to run typescript, e.g. `npx -g ts-node --transpile-only test.ts`.\nThe advantage that `nx` provides is it can provide default `webpack.config.js` and `tsconfg.json`,\nand with `--code` option we can edit ts files with vscode super easily.\n');const g=(0,i.tmpdir)(),b=r.join(g,"nx-sync");if(m)return void console.log(b);if(!e)throw new Error("requires script to run");if("update"===e)return void(yield(0,l.run)("npm remove -g node-ext; npm install -g node-ext",{debug:t}));const v=r.resolve(e);if(!r.isAbsolute(v))throw new Error(`failed to make ${e} absolute, the resolved path is ${v}`);if(!(yield s.stat(v).catch((n=>{throw new Error(`not exists: ${e}`)}))).isFile())throw new Error(`not a file: ${e}`);const x=r.dirname(v);if(!r.isAbsolute(x))throw new Error(`failed to detect absolute dir of ${e}, the resolved dir is ${x}`);if(x===b||x.startsWith(b))throw new Error(`${e} resides in nx-sync dir: ${b}, try another location`);const w=r.join(b,x);if(t&&console.error("target dir:",w),(f||h)&&(yield s.rm(w,{recursive:!0}),h))return;yield s.mkdir(w,{recursive:!0});const y=(0,a.formatPackageJSON)("tmp"),j=(0,a.formatTsConfigJSON)(),$=(0,a.formatWebpackConfigJS)(),_=yield s.readFile(r.resolve(__dirname,"../cmd.ts")),k="package.json.checksum",O=p?"":yield s.readFile(r.join(w,k),{encoding:"utf-8"}).catch((e=>{})),T=(0,d.createHash)("md5").update(y).digest("hex"),S={"run.ts":`import "${v}"`,"package.json":y,[k]:T,"tsconfig.json":j,"webpack.config.js":$,"cmd.ts":_};if(yield Promise.all([...Object.keys(S).map((e=>s.writeFile(r.join(w,e),S[e]))),(0,l.run)(`rm -rf "${w}/src" ; ln -s "${x}" "${w}/src"`,{debug:t})]),u)return void console.log(w);if(o)return void(yield(0,l.run)(`code --goto "${w}/src/${r.basename(v)}" "${w}"`,{debug:t}));let E=p||O!==T;if(!E){let e=!1;yield s.stat(r.join(w,"node_modules")).then((n=>e=n.isDirectory())).catch((e=>{})),E=!e}const D=t?"":"&>/dev/null";yield(0,l.run)(`\n    set -e\n    (\n        cd "$TARGET_DIR"\n        ${E?"npm install --no-audit --no-fund "+D:""}  # npm install is slow so we need a checksum to avoid repeat\n        npm run build-dev ${D} ; # dev mode webpack can use build cache\n    )\n    node "$TARGET_DIR/bin/run.js" "$@"\n    `,{debug:t,args:n,env:{TARGET_DIR:w}})}))}t(81),n.run=c,c().catch((e=>{console.error(e.message),process.exit(1)})).finally((()=>{}))},81:e=>{e.exports=require("child_process")},113:e=>{e.exports=require("crypto")},292:e=>{e.exports=require("fs/promises")},37:e=>{e.exports=require("os")},17:e=>{e.exports=require("path")}},n={};return function t(o){var r=n[o];if(void 0!==r)return r.exports;var s=n[o]={exports:{}};return e[o].call(s.exports,s,s.exports,t),s.exports}(192)})()));